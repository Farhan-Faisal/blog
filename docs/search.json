[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Intro to Environments with Conda",
    "section": "",
    "text": "Introduction\nIn data science, we frequently rely on many packages. With Python, we commonly use libraries such as pandas, numpy, scikit-learn, and many others. However, these libraries are often compatible only with specific versions of each other. This is where Conda environments come into play.\n\n\nWhy Use Conda Environments?\nConda environments allow us to list all the necessary packages for a project, along with their specific versions, in a single file. This way, when someone else wants to use our project, they can simply install all the required packages from this list, ensuring compatibility.\nYou might wonder: why do we need environments in the first place? Why can’t we just install the packages directly?\nThe answer is simple: you may have multiple projects, each requiring a different set of packages. One project might need Python 3.11, while another requires Python 3.9. By using environments, you can maintain separate sets of installed packages and activate the appropriate set depending on the project you are working on.\nIn the next section, I will show you how to set up an environment file and install a conda environment from an environment file.\n\n\nSetting Up a Conda Environment\nStep 1: Installing Miniconda To get started, you need to install Miniconda, a lightweight version of Anaconda that provides just the essentials for managing Conda environments.\nFollow the detailed instructions provided here for installing Miniconda.\nFor a quick installation on macOS (ARM64), open your terminal and run the following commands:\nmkdir -p ~/miniconda3\ncurl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh -o ~/miniconda3/miniconda.sh\nbash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3\nrm ~/miniconda3/miniconda.sh\nsource ~/miniconda3/bin/activate\nconda init --all\nStep 2: Creating the environment file\nIn your project folder, make the environment file named environment.yaml Open the file and paste the following:\nname: tutorial\nchannels:\n  - conda-forge\n  - defaults\ndependencies:\n  - numpy=1.26.0\n  - pandas=2.2.3\n  - pip=24.3.1\n  - python=3.11\n  - scikit-learn=1.5.2\n  - scipy=1.14.1\n  - quarto=1.5.57\nStep 3: Creating the environemnt from environment.yaml\nWhile in the directory where the environemnt.yaml is locatied, run:\nconda env create -f environment.yaml\nYou can then activate the conda environment using:\nconda activate tutorial\n\n\nGoing One Step Further: Using Conda Lock Files\nWhen you install an environment from an environment file, you might notice that additional packages, which were not explicitly listed, are also installed. For example, when we create the environment form our previous environment file, we see packages like xx installed:\nWhy does this happen? This occurs because in the environment file, we only specify high-level packages.\nBut when installing a Conda environment across different operating systems, Conda may install different versions of these low-level packages. Consequently, even though the high-level packages remain the same, the overall environment may differ across platforms. Additionally, since we haven’t specified exact versions for the low-level dependencies, installing the environment can take longer as Conda needs to resolve compatible versions on its own.\n\n\nThe Solution? Conda Lock Files\nConda lock files are platform-specific files that list the exact versions of all dependency packages, including low-level ones, for a given environment. By using these lock files, you can ensure that the environment is identical across different platforms.\nIn the next section, I will demonstrate how to generate and use Conda lock files to create consistent environments across various operating systems.\n\n\nGenerating and Using Conda Lock Files\nLet’s assume we are working with the following environment file (environment.yaml):\nname: tutorial\nchannels:\n  - conda-forge\n  - defaults\ndependencies:\n  - numpy=1.26.0\n  - pandas=2.2.3\n  - pip=24.3.1\n  - python=3.11\n  - scikit-learn=1.5.2\n  - scipy=1.14.1\n  - quarto=1.5.57\nTo generate a lock file for different platforms, run the appropriate command below:\nFor macOS (ARM-based, e.g., Apple Silicon):\nconda-lock -k explicit -p osx_arm64 -f environment.yaml\nFor macOS (intel):\nconda-lock -k explicit -p osx-64 -f environment.yaml\nFor Linux:\nconda-lock -k explicit -p linux-64 -f environment.yaml\nFor Windows:\nconda-lock -k explicit -p win-64 -f environment.yaml\nAssuming you are on macOS ARM, you can create an environment from the lock file by running:\nconda-lock install --name tutorial conda-osx-arm64.lock\nYou should generate all four conda lock files to ensure your collaborators have the necessary files for their respective platforms. Running the four commands will produce the following files:\n\n\n\nFour Lock Files\n\n\nNote:\n- The –name flag specifies the environment name (tutorial in this case). - The lock file ensures the exact versions of dependencies are installed, making the environment fully reproducible across different platforms.\n\n\nConclusion\nWith this knowledge, you are now ready to collaborate effortlessly with others and ensure that your projects run smoothly on any system. Happy coding!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJan 14, 2025\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJan 11, 2025\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  }
]